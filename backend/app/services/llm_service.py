from typing import Any
from app.schemas.tarot_schemas import TarotReadingRequest
import openai
from app.config import OPENAI_API_KEY, OPENAI_MODEL

async def get_tarot_reading(request: TarotReadingRequest) -> str:
    if not OPENAI_API_KEY:
        # fallback mock
        if request.lang == 'zh':
            return f"【模拟解析】问题：{request.question}\n牌阵：{request.spreadId}\n卡牌：" + ", ".join([
                f"{c.name}（{'逆位' if c.reversed else '正位'}）" for c in request.cards
            ]) + "\n（后续将由AI大模型生成详细解析）"
        else:
            return f"[Mock Analysis] Question: {request.question}\nSpread: {request.spreadId}\nCards: " + ", ".join([
                f"{c.enName} ({'Reversed' if c.reversed else 'Upright'})" for c in request.cards
            ]) + "\n(Detailed analysis will be generated by AI LLM in the future)"

    openai.api_key = OPENAI_API_KEY
    # 构造 prompt
    if request.lang == 'zh':
        prompt = (
            f"你是一位专业的塔罗牌占卜师，请根据以下信息为用户生成详细、易懂、有洞察力的塔罗牌占卜解析：\n"
            f"【用户问题】：{request.question}\n"
            f"【牌阵】：{request.spreadId}\n"
            f"【抽到的卡牌】："
            + ", ".join([f"{c.name}（{'逆位' if c.reversed else '正位'}）" for c in request.cards]) + "\n"
            "请分点详细分析每张牌的含义、它们之间的关系，并给出总结和建议。"
        )
    else:
        prompt = (
            f"You are a professional tarot reader. Based on the following information, generate a detailed, insightful, and easy-to-understand tarot reading for the user:\n"
            f"[User Question]: {request.question}\n"
            f"[Spread]: {request.spreadId}\n"
            f"[Drawn Cards]: "
            + ", ".join([f"{c.enName} ({'Reversed' if c.reversed else 'Upright'})" for c in request.cards]) + "\n"
            "Please analyze each card, their relationships, and provide a summary and advice."
        )
    try:
        response = await openai.ChatCompletion.acreate(
            model=OPENAI_MODEL,
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7,
            max_tokens=800,
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        # fallback mock
        if request.lang == 'zh':
            return f"【AI调用失败，返回模拟解析】问题：{request.question}\n牌阵：{request.spreadId}\n卡牌：" + ", ".join([
                f"{c.name}（{'逆位' if c.reversed else '正位'}）" for c in request.cards
            ]) + "\n（后续将由AI大模型生成详细解析）"
        else:
            return f"[AI Error Fallback] Question: {request.question}\nSpread: {request.spreadId}\nCards: " + ", ".join([
                f"{c.enName} ({'Reversed' if c.reversed else 'Upright'})" for c in request.cards
            ]) + "\n(Detailed analysis will be generated by AI LLM in the future)" 