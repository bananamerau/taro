
# 塔罗占卜网站项目需求文档

## 1. 项目概述

本项目旨在搭建一个基于塔罗牌的在线占卜网站，为用户提供个性化占卜服务。网站将整合塔罗牌占卜功能、每日运势抽牌、AI 大模型解析以及广告接入，并注重用户体验、SEO 优化和未来可扩展性。

## 2. 核心功能需求

### 2.1 塔罗牌占卜模块

* **用户问题输入：**
    * 提供文本输入框，允许用户清晰地输入自己的占卜问题。
    * 可增加问题示例或引导语，帮助用户更好地提问。
    * 考虑字数限制或输入提示，引导用户输入有效问题。
* **牌阵选择：**
    * 提供至少三种经典牌阵供用户选择，例如：
        * **三牌阵（过去-现在-未来）：** 适用于快速了解事件发展脉络。
        * **凯尔特十字牌阵：** 适用于深入分析复杂问题，提供多维度洞察。
        * **星形牌阵（或生命之花牌阵）：** 适用于关系、情感等特定主题的分析。
    * 每个牌阵应有清晰的名称、图示和简要说明，帮助用户理解其用途。
    * 牌阵选择后，界面应动态展示对应牌位的数量和位置，并预留卡牌翻转动画的区域。
* **卡牌抽取与反转特效：**
    * **随机抽牌：** 在用户确认问题和牌阵后，系统应从完整的塔罗牌（78张，包括大阿尔卡那和小阿尔卡那）中随机抽取所需数量的卡牌。
    * **反转特效：**
        * 卡牌初始状态为背面朝上。
        * 用户点击或鼠标悬停（考虑用户习惯）时，卡牌应以平滑自然的动画效果进行反转，展示牌面。
        * 反转动画可考虑：
            * **翻转效果：** 类似物理卡牌翻转的动画。
            * **渐变效果：** 卡牌背面逐渐淡出，牌面逐渐显现。
            * **粒子特效：** 翻转过程中伴随少量、不突兀的粒子效果，增加视觉趣味性。
        * 注意动画性能，避免卡顿。
    * **正逆位识别：** 卡牌反转后，应清晰标识是正位还是逆位，并作为后续大模型解析的输入。

### 2.2 每日运势模块

* **随机三牌抽取：**
    * 提供一个独立的入口（例如“今日运势”按钮）。
    * 用户点击后，系统自动随机抽取三张塔罗牌。
    * 卡牌展示方式与主占卜模块一致，带有反转特效。
* **简洁解析：**
    * 抽取的三张牌，每张牌下方应展示其名称和正逆位状态。
    * 可以考虑为每张牌提供一个简短的、预设的关键词或短语解释，增加即时反馈。
    * 最终解析仍需接入大模型，提供更全面的分析。

### 2.3 UI/UX 设计

* **技术栈：** 明确使用 React 进行开发。
* **UI 库选择：**
    * 建议选择高质量、功能丰富且社区活跃的 React UI 库，例如：
        * **Ant Design:** 提供了大量高质量的组件，文档完善，社区支持良好，适合快速构建复杂界面。
        * **Material-UI (MUI):** 遵循 Material Design 规范，视觉效果现代，组件丰富，可定制性强。
        * **Chakra UI:** 具有出色的可访问性，组件设计灵活，易于定制主题。
    * 选择时需考虑库的包体积和性能，以降低延迟。
* **页面风格：**
    * **简洁、现代：** 避免过多的装饰元素，突出核心功能。
    * **颜色和谐统一：** 选择一组主色调和辅助色调，保持整体视觉风格一致。可以考虑柔和、神秘的色彩方案，例如深蓝、紫色、金色、米白等。
    * **字体选择：** 易读、美观的字体，例如 Google Fonts 中的 Lato, Open Sans, Noto Sans CJK 等。
* **动画与特效：**
    * **平滑自然：** 所有动画（包括卡牌反转、页面切换、组件交互等）都应平滑过渡，避免突兀或生硬。
    * **性能优化：** 动画应尽量使用 CSS 动画或 Web Animations API，避免过度使用 JavaScript 动画导致性能问题。
    * **微交互：** 在按钮点击、输入框聚焦等地方增加细微的动画反馈，提升用户体验。

### 2.4 大模型接入与占卜解析

* **大模型选择：**
    * 考虑使用成本较低、API 接口成熟且响应速度较快的大模型，例如：
        * **OpenAI GPT 系列（例如 GPT-3.5 或 GPT-4）：** 功能强大，但成本可能较高。
        * **Google Gemini 系列：** 性能优异，与 Google 生态集成良好。
        * **国内大模型（例如文心一言、通义千问等）：** 考虑国内访问速度和成本。
    * 根据实际预算和性能需求进行选择。
* **API 接口设计：**
    * 前端将用户问题、所选牌阵、抽取的卡牌信息（名称、正逆位）作为参数传递给后端。
    * 后端调用大模型 API，将这些信息组合成一个结构化的 Prompt。
    * **Prompt Engineering：** 这是关键！设计高质量的 Prompt，指导大模型生成准确、有深度、易于理解的占卜解析。Prompt 应包含：
        * 占卜目的（例如“请你以塔罗牌占卜师的身份，基于以下卡牌和牌阵，为用户的问题进行解析”）。
        * 用户问题。
        * 牌阵信息（牌阵名称、每个牌位代表的含义）。
        * 每张卡牌的名称和正逆位信息。
        * 对解析结果的格式要求（例如：分点论述、包含总结、提供建议等）。
* **解析结果展示：**
    * 解析结果应清晰、分段展示，方便用户阅读。
    * 可以考虑将解析结果进行总结，并提供一些行动建议。
    * 对于长篇解析，可以考虑添加“展开/收起”功能。
* **错误处理与加载状态：**
    * 在大模型生成解析结果期间，应展示加载动画或提示信息，告知用户正在处理。
    * 大模型 API 调用失败时，应有友好的错误提示，并提供重试选项。
    * 考虑对大模型返回的内容进行敏感词过滤或安全审查（可选但推荐）。

## 3. 性能优化与资源考量

考虑到资源紧张，需重点关注性能和延迟。

* **前端优化：**
    * **代码分割（Code Splitting）：** 按需加载组件和模块，减少初始加载时间。
    * **图片优化：** 压缩图片大小，使用 WebP 等新一代图片格式。
    * **懒加载：** 对非首屏的图片或组件进行懒加载。
    * **组件优化：** 使用 React.memo, useCallback, useMemo 等进行性能优化，避免不必要的重新渲染。
    * **服务端渲染 (SSR) 或预渲染 (Pre-rendering)（可选但推荐）：** 对于首屏加载速度和 SEO 至关重要，可以考虑 Next.js 或 Gatsby.js 等框架。如果资源非常紧张，可以先不考虑，但未来可扩展性中要预留。
    * **CDN：** 静态资源（图片、JS、CSS）部署到 CDN，加速全球访问。
* **后端优化：**
    * **API 接口优化：** 尽量减少不必要的 API 请求，合并请求。
    * **数据缓存：** 对塔罗牌信息等不常变动的数据进行缓存。
    * **大模型请求优化：**
        * **异步处理：** 大模型请求是耗时操作，应采用异步处理，避免阻塞主线程。
        * **合理设置超时时间：** 避免长时间等待。
        * **请求队列管理：** 如果并发量大，考虑请求队列管理，避免大模型 API 限流。
    * **轻量级后端框架：** 考虑使用 Node.js (Express/Koa) 或 Python (Flask/FastAPI) 等轻量级框架，减少资源消耗。
* **数据库优化：**
    * 如果需要存储用户数据（未来扩展），选择轻量级数据库，例如 SQLite (开发环境) 或 MongoDB/PostgreSQL (生产环境)。
    * 合理设计数据库表结构，建立索引。

## 4. SEO 优化

* **语义化 HTML 结构：** 使用正确的 HTML 标签（`<h1>`, `<h2>`, `<p>`, `<a>`, `<img>` 等）。
* **友好的 URL 结构：** 简洁、易读、包含关键词的 URL，例如 `/tarot-reading`, `/daily-horoscope`。
* **Meta 标签优化：**
    * **`<title>` 标签：** 每个页面都应有独特且描述性的标题，包含关键词。
    * **`<meta name="description">`：** 撰写吸引人的页面描述，包含核心关键词。
    * **`<meta name="keywords">`：** 谨慎使用，现代 SEO 已不那么依赖，但可少量添加。
    * **Open Graph (OG) 标签：** 用于社交媒体分享时的展示优化。
* **内容优化：**
    * **高质量内容：** 大模型生成的解析结果应丰富、有深度，满足用户需求。
    * **关键词研究与布局：** 了解用户搜索习惯，合理在页面内容中融入相关关键词。
    * **内部链接：** 引导用户在网站内部进行跳转，例如从占卜结果页链接到相关牌阵介绍页。
* **网站地图 (Sitemap.xml)：** 提交给搜索引擎，帮助其更好地索引网站内容。
* **机器人文件 (Robots.txt)：** 指导搜索引擎爬虫抓取规则。
* **响应式设计：** 确保网站在不同设备（PC、手机、平板）上都能良好显示，提升用户体验和 SEO 排名。
* **HTTPS：** 网站使用 HTTPS 协议，提升安全性，对 SEO 也有积极影响。

## 5. 谷歌广告接入与管理

* **广告类型：** 主要考虑 Google AdSense。
* **广告位设计：**
    * 在不影响用户体验的前提下，合理设置广告位。
    * 可以考虑在占卜结果页下方、页面侧边栏或页面底部放置广告。
    * 避免广告过于密集或遮挡主要内容。
* **独立文件管理：**
    * 将 Google AdSense 相关的 JavaScript 代码和配置抽离成一个独立的模块或文件，例如 `ad-manager.js` 或 `GoogleAdSense.jsx`。
    * 在这个文件中统一管理广告的加载、初始化和展示逻辑。
    * 通过组件或 Hook 的方式在 React 应用中按需引用和渲染广告位，保持代码整洁和可维护性。
    * 考虑使用 `react-adsense` 或类似库简化集成。
* **广告策略：**
    * 初期可以尝试自动广告，后期根据数据调整广告位和类型。
    * 遵守 Google AdSense 政策，避免违规。

## 6. 项目可扩展性与模块化

* **技术选型：** React 作为前端框架，其组件化思想天然支持模块化。
* **组件化开发：** 将 UI 元素和功能逻辑拆分为独立的、可复用的组件。
    * 例如：`TarotCard` 组件、`SpreadSelector` 组件、`QuestionInput` 组件等。
* **状态管理：**
    * 对于大型应用，考虑使用 Redux, Zustand, Recoil 或 React Context API 进行全局状态管理，保持数据流清晰。
    * 将塔罗牌数据、用户问题、占卜结果等核心数据进行统一管理。
* **数据结构设计：**
    * 设计清晰、可扩展的数据结构来存储塔罗牌信息（名称、含义、图片路径等）、牌阵配置、用户占卜历史等。
    * 例如：`TarotCard` 对象包含 `id`, `name`, `uprightMeaning`, `reversedMeaning`, `imageUrl` 等属性。
* **API 接口统一管理：**
    * 将所有后端 API 请求封装在一个统一的文件或服务中（例如 `apiService.js`），方便管理和修改。
    * 使用 Axios 等 HTTP 客户端库进行请求。
* **CSS 组织：**
    * 使用 CSS Modules, Styled Components 或 Tailwind CSS 等方案，避免样式冲突，提高可维护性。
* **未来模块扩展预留：**
    * **用户登录/注册：** 预留用户认证模块，包括用户数据库、JWT 等认证机制。
    * **支付功能：** 预留支付接口集成（例如 Stripe, PayPal 或国内支付渠道），用于高级占卜服务或增值内容。
    * **在线咨询/预约：** 预留实时聊天或预约系统接口，方便用户与专业占卜师互动。
    * **占卜历史记录：** 用户登录后，可以查看自己的历史占卜记录。
    * **占卜师个人主页：** 预留占卜师管理模块，展示占卜师信息。
    * **社区论坛：** 预留用户交流平台。
* **版本控制：** 使用 Git 进行版本控制，并合理分支管理（例如 `main`, `develop`, `feature` 分支）。

## 7. 其他考虑

* **数据安全与隐私：** 保护用户数据，特别是占卜问题等敏感信息。遵守相关数据隐私法规（例如 GDPR）。
* **法律合规性：** 确保网站内容和运营符合当地法律法规。
* **可访问性 (Accessibility)：** 考虑为残障人士提供无障碍访问，例如使用 ARIA 属性。
* **国际化 (i18n) / 本地化 (l10n)：** 如果未来需要支持多语言，需要提前规划国际化方案。
* **测试：** 编写单元测试、集成测试和端到端测试，确保代码质量和功能稳定性。
* **部署：** 考虑使用 Vercel, Netlify (前端) 或 AWS EC2, Google Cloud Run (后端) 等云服务进行部署。